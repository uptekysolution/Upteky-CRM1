rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return request.auth.token.admin == true || 
             request.auth.token.role == 'Admin' ||
             request.auth.token.role == 'Sub-Admin';
    }

    function isHR() {
      return request.auth.token.role == 'HR';
    }

    // Users can read their own user document; admins can read all if custom claim set
    match /users/{userId} {
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow delete: if false;
    }

    // Audit Logs - Only admins and HR can read, but all authenticated users can write
    match /auditLogs/{logId} {
      // Only admins and HR can read audit logs
      allow read: if isSignedIn() && (isAdmin() || isHR());
      
      // All authenticated users can create audit logs (for logging their own actions)
      allow create: if isSignedIn() && 
        request.resource.data.userId is string &&
        request.resource.data.userEmail is string &&
        request.resource.data.userRole is string &&
        request.resource.data.actionType is string &&
        request.resource.data.moduleAccessed is string &&
        request.resource.data.description is string &&
        request.resource.data.status in ['success', 'failed', 'pending'];
      
      // Only admins can update or delete audit logs
      allow update, delete: if isSignedIn() && isAdmin();
    }

    // Tickets collection with per-client access controls
    match /tickets/{ticketId} {
      allow read: if isSignedIn() && (
        resource.data.clientId == request.auth.uid || isAdmin()
      );

      allow create: if isSignedIn() && (
        request.resource.data.clientId == request.auth.uid || isAdmin()
      ) &&
      request.resource.data.title is string &&
      request.resource.data.description is string &&
      request.resource.data.priority in ['low','medium','high'];

      // Client can update limited fields on own ticket; admin can update all
      allow update: if isSignedIn() && (
        isAdmin() || (
          resource.data.clientId == request.auth.uid &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['title','description','priority','lastMessage','lastUpdated','unreadByAdmin'])
        )
      );

      allow delete: if isSignedIn() && isAdmin();

      // Messages subcollection inherits parent access. Client can only write own messages.
      match /messages/{messageId} {
        allow read: if isSignedIn() && (
          get(/databases/$(database)/documents/tickets/$(ticketId)).data.clientId == request.auth.uid || isAdmin()
        );

        allow create: if isSignedIn() && (
          request.resource.data.senderId == request.auth.uid
        );

        allow update, delete: if false; // immutable messages
      }
    }

    // Projects collection with per-client access controls
    match /projects/{projectId} {
      allow read: if isSignedIn() && (
        resource.data.clientId == request.auth.uid || isAdmin()
      );

      allow create: if isSignedIn() && (
        request.resource.data.clientId == request.auth.uid || isAdmin()
      ) && request.resource.data.name is string;

      // Clients may not arbitrarily change ownership fields
      allow update: if isSignedIn() && (
        isAdmin() || (
          resource.data.clientId == request.auth.uid &&
          request.resource.data.clientId == resource.data.clientId
        )
      );

      allow delete: if isSignedIn() && isAdmin();

      // Milestones subcollection
      match /milestones/{milestoneId} {
        allow read: if isSignedIn() && (
          get(/databases/$(database)/documents/projects/$(projectId)).data.clientId == request.auth.uid || isAdmin()
        );
        allow create, update: if isSignedIn() && (
          isAdmin() || get(/databases/$(database)/documents/projects/$(projectId)).data.clientId == request.auth.uid
        );
        allow delete: if isSignedIn() && isAdmin();
      }
    }

    // Tasks collection: scoped to client via projectId->project.clientId
    match /tasks/{taskId} {
      allow read: if isSignedIn() && (
        isAdmin() || (
          // If task has projectId, validate client ownership
          resource.data.projectId is string &&
          get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.clientId == request.auth.uid
        )
      );

      allow create: if isSignedIn() && (
        isAdmin() || (
          request.resource.data.projectId is string &&
          get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.clientId == request.auth.uid
        )
      );

      allow update: if isSignedIn() && (
        isAdmin() || (
          resource.data.projectId is string &&
          get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.clientId == request.auth.uid
        )
      );

      allow delete: if isSignedIn() && isAdmin();
    }

    // Documents collection: file metadata
    match /documents/{docId} {
      allow read: if isSignedIn() && (
        isAdmin() || (
          resource.data.projectId is string &&
          get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.clientId == request.auth.uid
        )
      );

      allow create: if isSignedIn() && (
        isAdmin() || (
          request.resource.data.projectId is string &&
          get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.clientId == request.auth.uid
        )
      );

      allow update: if false; // immutable metadata except by admin via backend
      allow delete: if isSignedIn() && isAdmin();
    }

    // Activities collection: client-scoped logs
    match /activities/{activityId} {
      allow read: if isSignedIn() && (
        resource.data.clientId == request.auth.uid || isAdmin()
      );
      allow create: if isSignedIn() && (
        request.resource.data.clientId == request.auth.uid || isAdmin()
      );
      allow update, delete: if isSignedIn() && isAdmin();
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}


